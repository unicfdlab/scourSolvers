/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale     1;

R         0.05; // Cylinder radius
x0        #eval{ 0.5*$R };
x2        #eval{ 1.41421*$R };
x3        #eval{ 50.0*$R };
x1	  #eval{12.0*$R};
h	  #eval{1.0*$R};
dh	  #eval{0*$R};
x22	  #eval{$x2*sqrt(0.5)+$h};
x33	  #eval{$R*sqrt(0.5)+$h};

top	  #eval{$R*12};

fwBlock	  #eval{30.0*$R};
bwBlock	  #eval{60.0*$R};

//xOutlet   #eval{ 200*$R };
//xInlet    #eval{ -200*$R };

z0        -0.1;
z1        0.1;
nz        1;


vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        // sin(45), cos(45)
        const scalar sqrt05 = sqrt(0.5);

        pointField points(114);
        points[0] = point($R, $h, $z0);
        points[1] = point($x2, $h, $z0);
        points[2] = point($x3, $h, $z0);
        points[3] = point($x3, $x22, $z0);
        points[4] = point($x2*sqrt05, $x22, $z0);
        points[5] = point($R*sqrt05, $x33, $z0);
        points[6] = point($x3, $top+$h, $z0);
        points[7] = point($x2*sqrt05, $top+$h, $z0);

        // Mirror +x points to -x side
        points[11] = point(-points[0].x(), points[0].y(), points[0].z());
        points[12] = point(-points[1].x(), points[1].y(), points[1].z());
        points[13] = point(-$x1, points[2].y(), points[2].z());
        points[14] = point(-$x1, points[3].y(), points[3].z());
        points[15] = point(-points[4].x(), points[4].y(), points[4].z());
        points[16] = point(-points[5].x(), points[5].y(), points[5].z());
        points[17] = point(-$x1, points[6].y(), points[6].z());
        points[18] = point(-points[7].x(), points[7].y(), points[7].z());
	
	//Mirror +y points to -y side
	points[19] = point($x3, 0.005, $z0);
	points[20] = point($x2*sqrt05, 0.00425, $z0);
	points[21] = point($R*sqrt05, -$R*sqrt05+$h, $z0);
	points[22] = point($x3, 0.005, $z0);
	points[23] = point($x2*sqrt05, 0.005, $z0);	
	

        points[24] = point(-$x1, points[19].y(), points[19].z());
        points[25] = point(-points[20].x(), 0.00348, points[20].z());
        points[26] = point(-points[21].x(), points[21].y(), points[21].z());
        points[27] = point(-$x1, points[22].y(), points[22].z());
        points[28] = point(-points[23].x(), points[23].y(), points[23].z());
	

        // Points on the y-z-plane
        points[8] = point(0, $top+$h, $z0);
        points[9] = point(0, $x2+$h, $z0);
        points[10] = point(0, $R+$h, $z0);
	points[29] = point(0, 0.005, $z0);
	points[30] = point(0, -0.005, $z0);
	points[31] = point(0, -$R+$h, $z0);

        points[32] = point($R, $h, $z1);
        points[33] = point($x2, $h, $z1);
        points[34] = point($x3, $h, $z1);
        points[35] = point($x3, $x2*sqrt05+$h, $z1);
        points[36] = point($x2*sqrt05, $x2*sqrt05+$h, $z1);
        points[37] = point($R*sqrt05, $R*sqrt05+$h, $z1);
        points[38] = point($x3, $top+$h, $z1);
        points[39] = point($x2*sqrt05, $top+$h, $z1);

        // Mirror +x points to -x side
        points[43] = point(-points[32].x(), points[32].y(), points[32].z());
        points[44] = point(-points[33].x(), points[33].y(), points[33].z());
        points[45] = point(-$x1,points[34].y() , points[34].z());
        points[46] = point(-$x1, points[35].y(), points[35].z());
        points[47] = point(-points[36].x(), points[36].y(), points[36].z());
        points[48] = point(-points[37].x(), points[37].y(), points[37].z());
        points[49] = point(-$x1, points[38].y(), points[38].z());
        points[50] = point(-points[39].x(), points[39].y(), points[39].z());
	
	//Mirror +y points to -y side
	points[51] = point($x3, 0.005, $z1);
	points[52] = point($x2*sqrt05, 0.00425, $z1);
	points[53] = point($R*sqrt05, -$R*sqrt05+$h, $z1);
	points[54] = point($x3, 0.005, $z1);
	points[55] = point($x2*sqrt05, 0.005, $z1);	
	

        points[56] = point(-$x1, points[51].y(), points[51].z());
        points[57] = point(-points[52].x(), 0.00348, points[52].z());
        points[58] = point(-points[53].x(), points[53].y(), points[53].z());
        points[59] = point(-$x1, points[54].y(), points[54].z());
        points[60] = point(-points[55].x(), points[55].y(), points[55].z());
	

        // Points on the y-z-plane
        points[40] = point(0, $top+$h, $z1);
        points[41] = point(0, $x2+$h, $z1);
        points[42] = point(0, $R+$h, $z1);
	points[61] = point(0, 0.005, $z1);
	points[62] = point(0, -0.005, $z1);
	points[63] = point(0, -$R+$h, $z1);

	//forwardBlock

	points[64] = point(-$fwBlock, points[24].y(), points[24].z());
        points[65] = point(-$fwBlock, points[13].y(), points[13].z());
        points[66] = point(-$fwBlock, points[14].y(), points[14].z());
        points[67] = point(-$fwBlock, points[17].y(), points[17].z());
	points[68] = point(-$fwBlock, points[56].y(), points[56].z());
        points[69] = point(-$fwBlock, points[45].y(), points[45].z());
	points[70] = point(-$fwBlock, points[46].y(), points[46].z());
        points[71] = point(-$fwBlock, points[49].y(), points[49].z());


	//backwardBlock

	points[72] = point($bwBlock, points[24].y(), points[24].z());
        points[73] = point($bwBlock, points[13].y(), points[13].z());
        points[74] = point($bwBlock, points[14].y(), points[14].z());
        points[75] = point($bwBlock, points[17].y(), points[17].z());
	points[76] = point($bwBlock, points[56].y(), points[56].z());
        points[77] = point($bwBlock, points[45].y(), points[45].z());
	points[78] = point($bwBlock, points[46].y(), points[46].z());
        points[79] = point($bwBlock, points[49].y(), points[49].z());



	//bedLoad blocks
	points[80] = point(points[64].x(), points[64].y()-0.005, points[64].z());
        points[81] = point(points[24].x(), points[24].y()-0.005, points[24].z());
        points[82] = point(points[25].x(), points[25].y()-0.005, points[25].z());
        points[83] = point(points[30].x(), points[30].y()-0.005, points[30].z());
	points[84] = point(points[20].x(), -0.00052, points[20].z());
        points[85] = point(points[19].x(), points[19].y()-0.005, points[19].z());
	points[86] = point(points[72].x(), points[72].y()-0.005, points[72].z());

        points[87] = point(points[68].x(), points[68].y()-0.005, points[68].z());
	points[88] = point(points[56].x(), points[56].y()-0.005, points[56].z());
        points[89] = point(points[57].x(), points[57].y()-0.005, points[57].z());
        points[90] = point(points[62].x(), points[62].y()-0.005, points[62].z());
        points[91] = point(points[52].x(), -0.00052, points[52].z());
	points[92] = point(points[51].x(), points[51].y()-0.005, points[51].z());
        points[93] = point(points[76].x(), points[76].y()-0.005, points[76].z());


	//sinus
	points[94] = point($x2*sqrt05 + 0.05, 0.015, points[20].z());
        points[95] = point($x2*sqrt05 + 0.1, 0.005, points[24].z());
        points[96] = point($x2*sqrt05 + 0.05, points[0].y() , points[0].z());
        points[97] = point($x2*sqrt05 + 0.1, points[0].y(), points[0].z());
        points[98] = point($x2*sqrt05 + 0.05, points[4].y(), points[4].z());
	points[99] = point($x2*sqrt05 + 0.1, points[4].y(), points[4].z());
        points[100] = point($x2*sqrt05 + 0.05, points[7].y(), points[7].z());
	points[101] = point($x2*sqrt05 + 0.1, points[7].y(), points[7].z());
        points[102] = point($x2*sqrt05 + 0.05, 0.01, points[7].z());
	points[103] = point($x2*sqrt05 + 0.1, 0, points[7].z());


	points[104] = point($x2*sqrt05 + 0.05, 0.015, points[62].z());
        points[105] = point($x2*sqrt05 + 0.1, 0.005, points[62].z());
        points[106] = point($x2*sqrt05 + 0.05, points[0].y() , points[62].z());
        points[107] = point($x2*sqrt05 + 0.1, points[0].y(), points[62].z());
        points[108] = point($x2*sqrt05 + 0.05, points[4].y(), points[62].z());
	points[109] = point($x2*sqrt05 + 0.1, points[4].y(), points[62].z());
        points[110] = point($x2*sqrt05 + 0.05, points[7].y(), points[62].z());
	points[111] = point($x2*sqrt05 + 0.1, points[7].y(), points[62].z());
        points[112] = point($x2*sqrt05 + 0.05, 0.01, points[62].z());
	points[113] = point($x2*sqrt05 + 0.1, 0, points[62].z());


	

        os  << points;
    #};
};


blocks
(
     hex ( 5  4  9 10 37 36 41 42) (35 22 $nz) simpleGrading (4 1 1)  //0
    hex ( 0  1  4  5 32 33 36 37) (35 26 $nz) simpleGrading (4 1 1)	//1
    hex ( 9  4  7  8 41 36 39 40) (22 40 $nz) simpleGrading (1 30 1)	//2
    hex (15 16 10 9 47 48 42 41) (35 23 $nz) simpleGrading (0.25 1 1)		//3
    hex (12 11 16 15 44 43 48 47) (35 26 $nz) simpleGrading (0.25 1 1)		//4
    hex (13 12 15 14 45 44 47 46) (60 26 $nz) simpleGrading (-10 1 1)		//5
    hex (14 15 18 17 46 47 50 49) (60 40 $nz) simpleGrading (-10 30 1)		//6
    hex (15 9 8 18 47 41 40 50) (23 40 $nz) simpleGrading (1 30 1)		//7


    hex ( 31  30  20 21 63 62 52 53) (35 26 $nz) simpleGrading (4 1 1)		//8
    hex ( 0  21  20  1 32 53 52 33) (27 35 $nz) simpleGrading (1 4 1)		//9
    hex (26 25 30 31 58 57 62 63) (35 26 $nz) simpleGrading (4 1 1)		//10
    hex (12 25 26 11 44 57 58 43) (28 35 $nz) simpleGrading (-2 0.25 1)		//11
    hex (13 24 25 12 45 56 57 44) (28 60 $nz) simpleGrading (-2 -10 1)		//12


    //forwardBlock
    hex (64 24 13 65 68 56 45 69) (45 28 $nz) simpleGrading (1 2 1)		//13
    hex (65 13 14 66 69 45 46 70) (45 26 $nz) simpleGrading (1 1 1)		//14
    hex (66 14 17 67 70 46 49 71) (45 40 $nz) simpleGrading (1 30 1)		//15

    //backwardBlock
    hex (19 72 73 2 51 76 77 34) (5 27 $nz) simpleGrading (1 1 1)		//16
    hex (2 73 74 3 34 77 78 35) (5 26 $nz) simpleGrading (1 1 1)		//17
    hex (3 74 75 6 35 78 79 38) (5 40 $nz) simpleGrading (1 30 1)		//18
    
    //bedLoad
    hex (80 81 24 64 87 88 56 68) (45 6 $nz) simpleGrading (1 1 1) //19
    hex (81 82 25 24 88 89 57 56) (60 6 $nz) simpleGrading (-10 1 1)		//20
    hex (82 83 30 25 89 90 62 57) (26 6 $nz) simpleGrading (1 1 1)		//21
    hex (83 84 20 30 90 91 52 62) (26 6 $nz) simpleGrading (1 1 1)		//22
    hex (85 86 72 19 92 93 76 51) (5 6 $nz) simpleGrading (1 1 1)		//23

    //sinus
    hex (20 84 102 94 52 91 112 104) (6 31 $nz) simpleGrading (1 -1.1 1)		//24
    hex (94 102 103 95 104 112 113 105) (6 40 $nz) simpleGrading (1 1 1)		//25
    hex (95 103 85 19 105 113 92 51) (6 500 $nz) simpleGrading (1 ((0.2 0.8 1) (0.8 0.2 48)) 1)		//26
    hex (1 20 94 96 33 52 104 106) (27 31 $nz) simpleGrading (1 -1.1 1)		//27
    hex (96 94 95 97 106 104 105 107) (27 40 $nz) simpleGrading (1 1 1)		//28
    hex (97 95 19 2 107 105 51 34) (27 500 $nz) simpleGrading (1 ((0.2 0.8 1) (0.8 0.2 48)) 1)		//29
    hex (4 1 96 98 36 33 106 108) (26 31 $nz) simpleGrading (1 -1.1 1)		//30
    hex (98 96 97 99 108 106 107 109) (26 40 $nz) simpleGrading (1 1 1)		//31
    hex (99 97 2 3 109 107 34 35) (26 500 $nz) simpleGrading (1 ((0.2 0.8 1) (0.8 0.2 48)) 1)		//32
    hex (7 4 98 100 39 36 108 110) (40 31 $nz) simpleGrading (-30 -1.1 1)		//33
    hex (100 98 99 101 110 108 109 111) (40 40 $nz) simpleGrading (-30 1 1)		//34
    hex (101 99 3 6 111 109 35 38) (40 500 $nz) simpleGrading (-30 ((0.2 0.8 1) (0.8 0.2 48))  1)		//35
    



);

edges
(
    arc  0  5 origin (0 $h $z0)
    arc  5 10 origin (0 $h $z0)
    arc  1  4 origin (0 $h $z0)
    arc  4  9 origin (0 $h $z0)
    arc 32 37 origin (0 $h $z1)
    arc 37 42 origin (0 $h $z1)
    arc 33 36 origin (0 $h $z1)
    arc 36 41 origin (0 $h $z1)
    arc 11 16 origin (0 $h $z0)
    arc 16 10 origin (0 $h $z0)
    arc 12 15 origin (0 $h $z0)
    arc 15  9 origin (0 $h $z0)
    arc 43 48 origin (0 $h $z1)
    arc 48 42 origin (0 $h $z1)
    arc 44 47 origin (0 $h $z1)
    arc 47 41 origin (0 $h $z1)

    arc  0  21 origin (0 $h $z0)
    arc  21 31 origin (0 $h $z0)
    arc  1  20 origin (0 $h $z0)
  // arc  20  30 origin (0 $h $z0)
    arc 32 53 origin (0 $h $z1)
    arc 53 63 origin (0 $h $z1)
    arc 33 52 origin (0 $h $z1)
  // arc 52 62 origin (0 $h $z1)
    arc 11 26 origin (0 $h $z0)
    arc 26 31 origin (0 $h $z0)
    //arc 12 25 origin (0 $h $z0)
  // arc 25 30 origin (0 $h $z0)
    arc 43 58 origin (0 $h $z1)
    arc 58 63 origin (0 $h $z1)
    arc 44 57 origin (0 $h $z1)
   //arc 57 62 origin (0 $h $z1)





	polyLine 24 25 ((-0.2 0.005 -0.1) (-0.0901 0.005 -0.1) (-0.08555 0.005 -0.1) (-0.06722 0.005 -0.1) (-0.06417 0.005 -0.1) (-0.05973 0.004525 -0.1) (-0.05768 0.004535 -0.1) (-0.05339 0.004004 -0.1) (-0.05 0.00348  -0.1))
	polyLine 56 57 ((-0.2 0.005 0.1) (-0.0901 0.005 0.1) (-0.08555 0.005 0.1) (-0.06722 0.005 0.1) (-0.06417 0.005 0.1) (-0.05973 0.004525 0.1) (-0.05768 0.004535 0.1) (-0.05339 0.004004 0.1) (-0.05 0.00348  0.1))


	
	polyLine 25 30 ((-0.05 0.00348 -0.1) (-0.0468 0.0031 -0.1) (-0.043 0.0022 -0.1) (-0.0397 0.0011 -0.1) (-0.0356 -0.0002 -0.1) (-0.0309 -0.0014 -0.1) (-0.0271 -0.0023 -0.1) (-0.0222 -0.0033 -0.1) (-0.0177 -0.0039 -0.1) (-0.0135 -0.0044 -0.1) (-0.0088 -0.0048 -0.1) (-0.0049 -0.0049 -0.1) (0 -0.005 -0.1))
	polyLine 30 20 ((0 -0.005 -0.1) (0.0049 -0.0049 -0.1) (0.0088 -0.0048 -0.1) (0.0135 -0.0044 -0.1) (0.0177 -0.0039 -0.1) (0.0222 -0.0033 -0.1) (0.0271 -0.0023 -0.1) (0.0309 -0.0014 -0.1) (0.0356 -0.0002 -0.1) (0.0397 0.0011 -0.1) (0.043 0.0028 -0.1) (0.0468 0.0036 -0.1) (0.05 0.00425 -0.1))
	polyLine 57 62 ((-0.05 0.00348 0.1) (-0.0468 0.0031 0.1) (-0.043 0.0022 0.1) (-0.0397 0.0011 0.1) (-0.0356 -0.0002 0.1) (-0.0309 -0.0014 0.1) (-0.0271 -0.0023 0.1) (-0.0222 -0.0033 0.1) (-0.0177 -0.0039 0.1) (-0.0135 -0.0044 0.1) (-0.0088 -0.0048 0.1) (-0.0049 -0.0049 0.1) (0 -0.005 0.1))
	polyLine 62 52 ((0 -0.005 0.1) (0.0049 -0.0049 0.1) (0.0088 -0.0048 0.1) (0.0135 -0.0044 0.1) (0.0177 -0.0039 0.1) (0.0222 -0.0033 0.1) (0.0271 -0.0023 0.1) (0.0309 -0.0014 0.1) (0.0356 -0.0002 0.1) (0.0397 0.0011 0.1) (0.043 0.0028 0.1) (0.0468 0.0036 0.1) (0.05 0.00425 0.1))


	
//comment
//	polyLine 20 94 ((0.05 0.0041 -0.1) (0.0532 0.0059 -0.1) (0.057 0.0078 -0.1) (0.0603 0.0089 -0.1) (0.0644 0.0098 -0.1) (0.0691 0.0114 -0.1) (0.0729 0.0123 -0.1) (0.0778 0.0133 -0.1) (0.0823 0.0139 -0.1) (0.0865 0.0144 -0.1) (0.0912 0.0148 -0.1) (0.0951 0.0149 -0.1) (0.1 0.015 -0.1))
	polyLine 94 95 ((0.1 0.015 -0.1) (0.1049 0.0149 -0.1) (0.1088 0.0148 -0.1) (0.1135 0.0144 -0.1) (0.1177 0.0139 -0.1) (0.1222 0.0133 -0.1) (0.1271 0.0123 -0.1) (0.1309 0.0114 -0.1) (0.1356 0.0098 -0.1) (0.1397 0.0089 -0.1) (0.143 0.0078 -0.1) (0.1468 0.0069 -0.1) (0.15 0.005 -0.1))

//	polyLine 52 104 ((0.05 0.0041 0.1) (0.0532 0.0059 0.1) (0.057 0.0078 0.1) (0.0603 0.0089 0.1) (0.0644 0.0098 0.1) (0.0691 0.0114 0.1) (0.0729 0.0123 0.1) (0.0778 0.0133 0.1) (0.0823 0.0139 0.1) (0.0865 0.0144 0.1) (0.0912 0.0148 0.1) (0.0951 0.0149 0.1) (0.1 0.015 0.1))
	polyLine 104 105 ((0.1 0.015 0.1) (0.1049 0.0149 0.1) (0.1088 0.0148 0.1) (0.1135 0.0144 0.1) (0.1177 0.0139 0.1) (0.1222 0.0133 0.1) (0.1271 0.0123 0.1) (0.1309 0.0114 0.1) (0.1356 0.0098 0.1) (0.1397 0.0089 0.1) (0.143 0.0078 0.1) (0.1468 0.0069 0.1) (0.15 0.005 0.1))


//	polyLine 20 94 ((0.05 0.0041 -0.1) (0.0532 0.00386 -0.1) (0.057 0.00476 -0.1) (0.0603 0.00586 -0.1) (0.0644 0.00716 -0.1) (0.0691 0.00836 -0.1) (0.0729 0.00926 -0.1) (0.0778 0.01026 -0.1) (0.0823 0.01086 -0.1) (0.0865 0.01136 -0.1) (0.0912 0.01178 -0.1) (0.0951 0.01186 -0.1) (0.1 0.01196 -0.1))
//	polyLine 94 95 ((0.1 0.01196 -0.1) (0.1049 0.01186 -0.1) (0.1088 0.01178 -0.1) (0.1135 0.01136 -0.1) (0.1177 0.01086 -0.1) (0.1222 0.01026 -0.1) (0.1271 0.00926 -0.1) (0.1309 0.00836 -0.1) (0.1356 0.00716 -0.1) (0.1397 0.00586 -0.1) (0.143 0.00476 -0.1) (0.1468 0.00386 -0.1) (0.15 0.005 -0.1))

//	polyLine 52 104 ((0.05 0.0041 0.1) (0.0532 0.00386 0.1) (0.057 0.00476 0.1) (0.0603 0.00586 0.1) (0.0644 0.00716 0.1) (0.0691 0.00836 0.1) (0.0729 0.00926 0.1) (0.0778 0.01026 0.1) (0.0823 0.01086 0.1) (0.0865 0.01136 0.1) (0.0912 0.01178 0.1) (0.0951 0.01186 0.1) (0.1 0.01196 0.1))
//	polyLine 104 105 ((0.1 0.01196 0.1) (0.1049 0.01186 0.1) (0.1088 0.01178 0.1) (0.1135 0.01136 0.1) (0.1177 0.01086 0.1) (0.1222 0.01026 0.1) (0.1271 0.00926 0.1) (0.1309 0.00836 0.1) (0.1356 0.00716 0.1) (0.1397 0.00586 0.1) (0.143 0.00476 0.1) (0.1468 0.00386 0.1) (0.15 0.005 0.1))


//mid
	polyLine 20 94 ((0.05 0.00425 -0.1) (0.0532 0.00488 -0.1) (0.057 0.00628 -0.1) (0.0603 0.00738 -0.1) (0.0644 0.00848 -0.1) (0.0691 0.00988 -0.1) (0.0729 0.01078 -0.1) (0.0778 0.01178 -0.1) (0.0823 0.0139 -0.1) (0.0865 0.0144 -0.1) (0.0912 0.0148 -0.1) (0.0951 0.0149 -0.1) (0.1 0.015 -0.1))
	polyLine 52 104 ((0.05 0.00425 0.1) (0.0532 0.00488 0.1) (0.057 0.00628 0.1) (0.0603 0.00738 0.1) (0.0644 0.00848 0.1) (0.0691 0.00988 0.1) (0.0729 0.01078 0.1) (0.0778 0.01178 0.1) (0.0823 0.0139 0.1) (0.0865 0.0144 0.1) (0.0912 0.0148 0.1) (0.0951 0.0149 0.1) (0.1 0.015 0.1))


//	polyLine 52 51 ((0.05 0.00348 0.1) (0.05339 0.004004 0.1) (0.05768 0.004535 0.1) (0.05973 0.004525 0.1) (0.06471 0.005 0.1) (0.065 0.005 0.1) (1 0.005 0.1)) 




	polyLine 81 82 ((-0.2 0 -0.1) (-0.0901 0 -0.1) (-0.08555 0 -0.1) (-0.06722 0 -0.1) (-0.06417 0 -0.1) (-0.05973 -0.000475 -0.1) (-0.05768 -0.000465 -0.1) (-0.05339 -0.000996 -0.1) (-0.05 -0.00152  -0.1))
	polyLine 88 89 ((-0.2 0 0.1) (-0.0901 0 0.1) (-0.08555 0 0.1) (-0.06722 0 0.1) (-0.06417 0 0.1) (-0.05973 -0.000475 0.1) (-0.05768 -0.000465 0.1) (-0.05339 -0.000996 0.1) (-0.05 -0.00152  0.1))


	
	polyLine 82 83 ((-0.05 -0.00152 -0.1) (-0.0468 -0.0019 -0.1) (-0.043 -0.0028 -0.1) (-0.0397 -0.0039 -0.1) (-0.0356 -0.0052 -0.1) (-0.0309 -0.0064 -0.1) (-0.0271 -0.0073 -0.1) (-0.0222 -0.0083 -0.1) (-0.0177 -0.0089 -0.1) (-0.0135 -0.0094 -0.1) (-0.0088 -0.0098 -0.1) (-0.0049 -0.0099 -0.1) (0 -0.01 -0.1))
	polyLine 83 84 ((0 -0.01 -0.1) (0.0049 -0.0099 -0.1) (0.0088 -0.0098 -0.1) (0.0135 -0.0094 -0.1) (0.0177 -0.0089 -0.1) (0.0222 -0.0083 -0.1) (0.0271 -0.0073 -0.1) (0.0309 -0.0064 -0.1) (0.0356 -0.0052 -0.1) (0.0397 -0.0039 -0.1) (0.043 -0.0028 -0.1) (0.0468 -0.0016 -0.1) (0.0484 -0.00111 -0.1) (0.05 -0.00052 -0.1))
	polyLine 89 90 ((-0.05 -0.00152 0.1) (-0.0468 -0.0019 0.1) (-0.043 -0.0028 0.1) (-0.0397 -0.0039 0.1) (-0.0356 -0.0052 0.1) (-0.0309 -0.0064 0.1) (-0.0271 -0.0073 0.1) (-0.0222 -0.0083 0.1) (-0.0177 -0.0089 0.1) (-0.0135 -0.0094 0.1) (-0.0088 -0.0098 0.1) (-0.0049 -0.0099 0.1) (0 -0.01 0.1))
	polyLine 90 91 ((0 -0.01 0.1) (0.0049 -0.0099 0.1) (0.0088 -0.0098 0.1) (0.0135 -0.0094 0.1) (0.0177 -0.0089 0.1) (0.0222 -0.0083 0.1) (0.0271 -0.0073 0.1) (0.0309 -0.0064 0.1) (0.0356 -0.0052 0.1) (0.0397 -0.0039 0.1) (0.043 -0.0028 0.1) (0.0468 -0.0016 0.1) (0.0484 -0.00111 0.1) (0.05 -0.00052 0.1))




	polyLine 84 102 ((0.05 -0.00052 -0.1) (0.0516 0.0001 -0.1) (0.0532 0.00041 -0.1) (0.057 0.0022 -0.1) (0.0603 0.0035 -0.1) (0.0644 0.0048 -0.1) (0.0691 0.0064 -0.1) (0.0729 0.0073 -0.1) (0.0778 0.0083 -0.1) (0.0823 0.0089 -0.1) (0.0865 0.0094 -0.1) (0.0912 0.0098 -0.1) (0.0951 0.0099 -0.1) (0.1 0.01 -0.1))
	polyLine 102 103 ((0.1 0.01 -0.1) (0.1049 0.0099 -0.1) (0.1088 0.0098 -0.1) (0.1135 0.0094 -0.1) (0.1177 0.0089 -0.1) (0.1222 0.0083 -0.1) (0.1271 0.0073 -0.1) (0.1309 0.0064 -0.1) (0.1356 0.0048 -0.1) (0.1397 0.0039 -0.1) (0.143 0.0028 -0.1) (0.1468 0.0019 -0.1) (0.15 0 -0.1))

	polyLine 91 112 ((0.05 -0.00052 0.1) (0.0516 0.0001 0.1) (0.0532 0.00041 0.1) (0.057 0.0022 0.1) (0.0603 0.0035 0.1) (0.0644 0.0048 0.1) (0.0691 0.0064 0.1) (0.0729 0.0073 0.1) (0.0778 0.0083 0.1) (0.0823 0.0089 0.1) (0.0865 0.0094 0.1) (0.0912 0.0098 0.1) (0.0951 0.0099 0.1) (0.1 0.01 0.1))
	polyLine 112 113 ((0.1 0.01 0.1) (0.1049 0.0099 0.1) (0.1088 0.0098 0.1) (0.1135 0.0094 0.1) (0.1177 0.0089 0.1) (0.1222 0.0083 0.1) (0.1271 0.0073 0.1) (0.1309 0.0064 0.1) (0.1356 0.0048 0.1) (0.1397 0.0039 0.1) (0.143 0.0028 0.1) (0.1468 0.0019 0.1) (0.15 0 0.1))



//	polyLine 84 102 ((0.05 -0.00152 -0.1) (0.0532 -0.00114 -0.1) (0.057 -0.00024 -0.1) (0.0603 0.00086 -0.1) (0.0644 0.00216 -0.1) (0.0691 0.00336 -0.1) (0.0729 0.00426 -0.1) (0.0778 0.00526 -0.1) (0.0823 0.00586 -0.1) (0.0865 0.00636 -0.1) (0.0912 0.00678 -0.1) (0.0951 0.00686 -0.1) (0.1 0.00696 -0.1))
//	polyLine 102 103 ((0.1 0.01196 -0.1) (0.1049 0.01186 -0.1) (0.1088 0.01178 -0.1) (0.1135 0.01136 -0.1) (0.1177 0.01086 -0.1) (0.1222 0.01026 -0.1) (0.1271 0.00926 -0.1) (0.1309 0.00836 -0.1) (0.1356 0.00716 -0.1) (0.1397 0.00586 -0.1) (0.143 0.00476 -0.1) (0.1468 0.00386 -0.1) (0.15 0.005 -0.1))

//	polyLine 91 112 ((0.05 0.00348 0.1) (0.0532 0.00386 0.1) (0.057 0.00476 0.1) (0.0603 0.00586 0.1) (0.0644 0.00716 0.1) (0.0691 0.00836 0.1) (0.0729 0.00926 0.1) (0.0778 0.01026 0.1) (0.0823 0.01086 0.1) (0.0865 0.01136 0.1) (0.0912 0.01178 0.1) (0.0951 0.01186 0.1) (0.1 0.01196 0.1))
//	polyLine 112 113 ((0.1 0.01196 0.1) (0.1049 0.01186 0.1) (0.1088 0.01178 0.1) (0.1135 0.01136 0.1) (0.1177 0.01086 0.1) (0.1222 0.01026 0.1) (0.1271 0.00926 0.1) (0.1309 0.00836 0.1) (0.1356 0.00716 0.1) (0.1397 0.00586 0.1) (0.143 0.00476 0.1) (0.1468 0.00386 0.1) (0.15 0.005 0.1))

	

//	polyLine 84 85 ((0.05 -0.00152 -0.1) (0.05339 -0.000996 -0.1) (0.05768 -0.000465 -0.1) (0.05973 -0.000465 -0.1) (0.06471 0 -0.1) (0.065 0 -0.1) (1 0 -0.1)) 
//	polyLine 91 92 ((0.05 -0.00152 0.1) (0.05339 -0.000996 0.1) (0.05768 -0.000465 0.1) (0.05973 -0.000475 0.1) (0.06471 0 0.1) (0.065 0 0.1) (1 0 0.1)) 






);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (67 71 70 66)
            (66 70 69 65)
	    (65 69 68 64)
	    (64 68 87 80)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (75 79 78 74)
            (74 78 77 73)
	    (73 77 76 72)
	    (72 76 93 86)
	    
        );
    }
    Bottom
    {
        type wall;
        faces
        (
	(81 88 89 82)
	(82 89 90 83)
	(83 90 91 84)
	(84 91 112 102)
	(102 112 113 103)
	(103 113 92 85)

	);
    }

 Top
    {
        type wall;
        faces
        (

	    (17 49 50 18)
	    (18 50 40 8)
	    (8 40 39 7)
	    (67 71 49 17)
	    (6 38 79 75)
	    (7 39 110 100)
	    (100 110 111 101)
	    (101 111 38 6)
	);
    }
    SideWalls
    {
	type empty;
	faces
	(
	    
	    
	    
	    (1 20 94 96)
	    (96 94 95 97)
	    (97 95 19 2)
	    (4 1 96 98)
	    (98 96 97 99)
	    (99 97 2 3)
	    (7 4 98 100)
	    (100 98 99 101)
	    (101 99 3 6)
	    (20 84 102 94)
	    (94 102 103 95)
	    (95 103 85 19)


	

	    (8 9 4 7)
	    (18 15 9 8)
	    (17 14 15 18)
	    (14 13 12 15)
	    (13 24 25 12)
	    (12 11 16 15)
	    (25 26 11 12)
	    (30 31 26 25)
	    (30 20 21 31)
	    (20 1 0 21)
	    (0 1 4 5)
	    (5 4 9 10)
	    (16 10 9 15)
	    (67 66 14 17)
	    (66 65 13 14)
	    (65 64 24 13)
	    (6 3 74 75)
	    (3 2 73 74)
	    (2 19 72 73)
	    (64 80 81 24)
	    (24 81 82 25)
	    (25 82 83 30)
	    (30 83 84 20)
	    (19 85 86 72)
	    
	    
	    (33 52 104 106)
	    (106 104 105 107)
	    (107 105 51 34)
	    (36 33 106 108)
	    (108 106 107 109)
	    (109 107 34 35)
	    (39 36 108 110)
	    (110 108 109 111)
	    (111 109 35 38)
	    (52 91 112 104)
	    (104 112 113 105)
	    (105 113 92 51)




	    (40 41 36 39)
	    (50 47 41 40)
	    (49 46 47 50)
	    (46 45 44 47)
	    (45 56 57 44)
	    (47 44 43 48)
	    (44 57 58 43)
	    (57 62 63 58)
	    (62 52 53 63)
	    (33 32 53 52)
	    (37 32 33 36)
	    (41 42 37 36)
	    (47 48 42 41)
	    (71 70 46 49)
	    (70 69 45 46)
	    (69 68 56 45)
	    (38 35 78 79)
	    (35 34 77 78)
	    (34 51 76 77)
	    (68 87 88 56)
	    (56 88 89 57)
	    (57 89 90 62)
	    (62 90 91 52)
	    (51 92 93 76)

        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (16 48 43 11)
            (10 42 48 16)
            (5 37 42 10)
	    (0 32 37 5)
            (0 32 53 21)
	    (21 53 63 31)
	    (31 63 58 26)
	    (26 58 43 11)
        );
    }
    
    ledge
    {
	type wall;
	faces
	(
		(80 87 88 81)
	    	(85 92 93 86)
	);
    }
);

mergePatchPairs
();


// ************************************************************************* //
